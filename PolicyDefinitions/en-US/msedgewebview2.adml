<?xml version="1.0" ?><policyDefinitionResources revision="1.0" schemaVersion="1.0" xmlns="http://www.microsoft.com/GroupPolicy/PolicyDefinitions"><!--microsoft_edge version: 140.0.3485.94--><displayName/><description/><resources><stringTable><string id="WebView2LoaderOverrideSettings_group">Loader Override Settings</string><string id="BrowserExecutableFolder">Configure the location of the browser executable folder</string><string id="BrowserExecutableFolder_Explain">This policy configures WebView2 applications to use the WebView2 Runtime in the specified path. The folder should contain the following files: msedgewebview2.exe, msedge.dll, and so on.

To set the value for the folder path, provide a Value name and Value pair. Set value name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications.

Example value:

Name: *, Value: C:\Program Files\Microsoft Edge WebView2 Runtime Redistributable 85.0.541.0 x64</string><string id="BrowserExecutableFolderDesc">Configure the location of the browser executable folder</string><string id="ChannelSearchKind">Configure the WebView2 release channel search kind</string><string id="ChannelSearchKind_Explain">This policy configures the channel search kind for WebView2 applications. By default the channel search kind is 0, which is equivalent to the &quot;Most Stable&quot; search kind in the corresponding WebView2 API; This indicates that WebView2 environment creation should search for a release channel from the most to least stable: WebView2 Runtime, Beta, Dev, and Canary.

To reverse the default search order and use the &quot;Least Stable&quot; search kind, set this policy to 1.

To set the value for the channel search kind, provide a Value name and Value pair. Set value name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications.

Example value:

Name: WebView2APISample.exe, Value: 1</string><string id="ChannelSearchKindDesc">Configure the WebView2 release channel search kind</string><string id="ReleaseChannelPreference">Set the release channel search order preference (deprecated)</string><string id="ReleaseChannelPreference_Explain">DEPRECATED: This policy is deprecated. It is currently supported but will become obsolete in a future release.

This policy is deprecated in favor of ChannelSearchKind, which has the same functionality, and will become obsolete in 124 release. The default channel search order is WebView2 Runtime, Beta, Dev, and Canary.

To reverse the default search order, set this policy to 1.

To set the value for the release channel preference, provide a Value name and Value pair. Set value name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications.

Example value:

Name: *, Value: 1</string><string id="ReleaseChannelPreferenceDesc">Set the release channel search order preference (deprecated)</string><string id="ReleaseChannels">Configure the WebView2 release channels</string><string id="ReleaseChannels_Explain">This policy configures the release channel options for WebView2 applications. To configure these options, set the value to a comma-separated string of integers, which map to the `COREWEBVIEW2_RELEASE_CHANNELS` values from the corresponding WebView2 API. These values are: WebView2 Runtime (0), Beta (1), Dev (2), and Canary (3). By default, environment creation searches for channels from most to least stable, using the first channel found on the device. When `ReleaseChannels` is provided, environment creation will only search for the channels specified in the set. For example, the values &quot;0,2&quot; and &quot;2,0&quot; indicate that environment creation should only search for Dev channel and the WebView2 Runtime, using the order indicated by `ChannelSearchKind`. Environment creation attempts to interpret each integer and treats any invalid entry as the Stable channel. Set `ChannelSearchKind` to reverse the search order so environment creation searches for least stable build first. If both `BrowserExecutableFolder` and `ReleaseChannels` are provided, the `BrowserExecutableFolder` takes precedence, regardless of whether the channel of `BrowserExecutableFolder` is included in the `ReleaseChannels`.

To set the value for release channels, provide a Value name and Value pair. Set the value name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications.

Example value:

Name: WebView2APISample.exe, Value: 0,1,2</string><string id="ReleaseChannelsDesc">Configure the WebView2 release channels</string><string id="Network_group">Network settings</string><string id="AccessControlAllowMethodsInCORSPreflightSpecConformant">Make Access-Control-Allow-Methods matching in CORS preflight spec conformant</string><string id="AccessControlAllowMethodsInCORSPreflightSpecConformant_Explain">This policy controls whether request methods are uppercased when matching with Access-Control-Allow-Methods response headers in CORS preflight.

If you disable this policy, request methods are uppercased. This is the behavior on or before Microsoft Edge 108.

If you enable or don't configure this policy, request methods are not uppercased, unless matching case-insensitively with DELETE, GET, HEAD, OPTIONS, POST, or PUT.

This would reject fetch(url, {method: 'Foo'}) + &quot;Access-Control-Allow-Methods: FOO&quot; response header,
and would accept fetch(url, {method: 'Foo'}) + &quot;Access-Control-Allow-Methods: Foo&quot; response header.

Note: request methods &quot;post&quot; and &quot;put&quot; are not affected, while &quot;patch&quot; is affected.

This policy is intended to be temporary and will be removed in the future.</string><string id="BlockTruncatedCookies">Block truncated cookies (obsolete)</string><string id="BlockTruncatedCookies_Explain">OBSOLETE: This policy is obsolete and doesn't work after Microsoft Edge 131.

This policy provides a temporary opt-out for changes to how Microsoft Edge handles cookies set via JavaScript that contain certain control characters (NULL, carriage return, and line feed).
Previously, the presence of any of these characters in a cookie string would cause it to be truncated but still set.
Now, the presence of these characters will cause the whole cookie string to be ignored.

If you enable or don't configure this policy, the new behavior is enabled.

If you disable this policy, the old behavior is enabled.

This policy is obsolete because this policy was originally implemented as a safety measure in case of breakage, but none have been reported.</string><string id="ZstdContentEncodingEnabled">Enable zstd content encoding support (obsolete)</string><string id="ZstdContentEncodingEnabled_Explain">OBSOLETE: This policy is obsolete and doesn't work after Microsoft Edge 137.

This policy controls whether Microsoft Edge supports Zstandard (zstd) content encoding.

Enabled – Edge advertises zstd in the Accept-Encoding request header and can decompress responses encoded with zstd.

Disabled – Edge doesn't advertise or support zstd content encoding.

Not configured – The default behavior is to enable support for zstd content encoding.

NOTE:
This policy has been made obsolete starting with Microsoft Edge version 138 because Microsoft Edge now always supports zstd content encoding.</string><string id="ExperimentationAndConfigurationServiceControl">Control communication with the Experimentation and Configuration Service</string><string id="ExperimentationAndConfigurationServiceControl_Explain">The Experimentation and Configuration Service is used to deploy Experimentation and Configuration payloads to the client.

Experimentation payload consists of a list of early in development features that Microsoft is enabling for testing and feedback.

Configuration payload consists of a list of recommended settings that Microsoft wants to deploy to optimize the user experience.

Configuration payload may also contain a list of actions to take on certain domains for compatibility reasons. For example, the browser may override the User Agent string on a website if that website is broken. Each of these actions is intended to be temporary while Microsoft tries to resolve the issue with the site owner.

If you set this policy to 'FullMode', the full payload is downloaded from the Experimentation and Configuration Service. This includes both the experimentation and configuration payloads.

If you set this policy to 'ConfigurationsOnlyMode', only the configuration payload is downloaded.

If you set this policy to 'RestrictedMode', the communication with the Experimentation and Configuration Service is stopped completely. Microsoft does not recommend this setting.

If you don't configure this policy on a managed device, the behavior on Beta and Stable channels is the same as the 'ConfigurationsOnlyMode'. On Canary and Dev channels the behavior is the same as 'FullMode'.

If you don't configure this policy on an unmanaged device, the behavior is the same as the 'FullMode'.

Policy options mapping:

* FullMode (2) = Retrieve configurations and experiments

* ConfigurationsOnlyMode (1) = Retrieve configurations only

* RestrictedMode (0) = Disable communication with the Experimentation and Configuration Service

Use the preceding information when configuring this policy.</string><string id="ExperimentationAndConfigurationServiceControl_FullMode">Retrieve configurations and experiments</string><string id="ExperimentationAndConfigurationServiceControl_ConfigurationsOnlyMode">Retrieve configurations only</string><string id="ExperimentationAndConfigurationServiceControl_RestrictedMode">Disable communication with the Experimentation and Configuration Service</string><string id="ForcePermissionPolicyUnloadDefaultEnabled">Controls whether unload event handlers can be disabled.</string><string id="ForcePermissionPolicyUnloadDefaultEnabled_Explain">unload event handlers are being deprecated. Whether they fire depends on the unload Permissions-Policy.
Currently, they are allowed by policy by default. In the future they will gradually move to being disallowed by default and sites must explicitly enable them using Permissions-Policy headers.
This enterprise policy can be used to opt out of this gradual deprecation by forcing the default to stay enabled.

Pages might depend on unload event handlers to save data or signal the end of a user session to the server.
This is not recommended because it's unreliable and impacts performance by blocking use of BackForwardCache.
Recommended alternatives exist, but the unload event has been used for a long time. Some applications might still rely on them.

If you disable this policy or don't configure it, unload event handlers will gradually be deprecated in-line with the deprecation rollout and sites which don't set Permissions-Policy header will stop firing `unload` events.

If you enable this policy then unload event handlers will continue to work by default.</string><string id="HttpAllowlist">HTTP Allowlist</string><string id="HttpAllowlist_Explain">Setting the policy specifies a list of hostnames or hostname patterns (such as '[*.]example.com') that won't be upgraded to HTTPS. Organizations can use this policy to maintain access to servers that don't support HTTPS, without needing to disable &quot;HttpsUpgradesEnabled&quot;.

Supplied hostnames must be canonicalized: Any IDNs must be converted to their A-label format, and all ASCII letters must be lowercase.

Blanket host wildcards (that is, &quot;*&quot; or &quot;[*]&quot;) aren't allowed. Instead, HTTPS-First Mode and HTTPS Upgrades should be explicitly disabled via their specific policies.

Note: This policy doesn't apply to HSTS upgrades.

Example value:

testserver.example.com
[*.]example.org</string><string id="HttpAllowlistDesc">HTTP Allowlist</string><string id="NewBaseUrlInheritanceBehaviorAllowed">Allows enabling the feature NewBaseUrlInheritanceBehavior (obsolete)</string><string id="NewBaseUrlInheritanceBehaviorAllowed_Explain">OBSOLETE: This policy is obsolete and doesn't work after Microsoft Edge 135.

NewBaseUrlInheritanceBehavior is a Microsoft Edge feature that causes about:blank and about:srcdoc frames to consistently inherit their base url values via snapshots of their initiator's base url.

If you disable this policy, it prevents users or Microsoft Edge variations from enabling NewBaseUrlInheritanceBehavior, in case compatibility issues are discovered.

If you enable or don't configure this policy, it allows enabling NewBaseUrlInheritanceBehavior.

The policy has been obsoleted starting from Microsoft Edge version 136, but the NewBaseUrlInheritanceBehaviorAllowed feature was removed in Microsoft Edge version 123.</string><string id="NewPDFReaderWebView2List">Enable built-in PDF reader powered by Adobe Acrobat for WebView2</string><string id="NewPDFReaderWebView2List_Explain">This policy configures WebView2 applications to launch the new version of the PDF reader that's powered by Adobe Acrobat's PDF reader. The new PDF reader ensures that there's no loss of functionality and delivers an enhanced PDF experience. This experience includes richer rendering, improved performance, strong security for PDF file handling, and greater accessibility.

If this policy is specified for an application, it is possible that it may impact other related applications as well. The policy is applied to all WebView2s sharing the same WebView2 user data folder. These WebView2s could potentially belong to multiple applications if those applications, which are likely from the same product family, are designed to share the same user data folder.

Use a name-value pair to enable the new PDF reader for the application. Set the name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications. Set the Value to true to enable the new reader or set it to false to use the existing one.

If you enable this policy for the specified WebView2 applications, they will use the new Adobe Acrobat powered PDF reader to open all PDF files.

If you disable the policy for the specified WebView2 applications or don't configure it, they will use the existing PDF reader to open all PDF files.

Example value:

{&quot;name&quot;: &quot;app1.exe&quot;, &quot;value&quot;: true}
{&quot;name&quot;: &quot;app_id_for_app2&quot;, &quot;value&quot;: true}
{&quot;name&quot;: &quot;*&quot;, &quot;value&quot;: false}</string><string id="NewPDFReaderWebView2ListDesc">Enable built-in PDF reader powered by Adobe Acrobat for WebView2</string><string id="RSAKeyUsageForLocalAnchorsEnabled">Check RSA key usage for server certificates issued by local trust anchors (obsolete)</string><string id="RSAKeyUsageForLocalAnchorsEnabled_Explain">OBSOLETE: This policy is obsolete and doesn't work after Microsoft Edge 135.

The X.509 key usage extension declares how the key in a certificate can be
used. These instructions ensure certificates aren't used in an unintended
context, which protects against a class of cross-protocol attacks on HTTPS and
other protocols. HTTPS clients must verify that server certificates match the
connection's TLS parameters.

Starting in Microsoft Edge 124, this
check is always enabled.

Microsoft Edge 123 and earlier have the
following behavior:

If this policy is set to enabled,
Microsoft Edge will perform this key
check. This helps prevent attacks where an attacker manipulates the browser into
interpreting a key in ways that the certificate owner did not intend.

If this policy is set to disabled,
Microsoft Edge will skip this key check in
HTTPS connections that negotiate TLS 1.2 and use an RSA certificate that
chains to a local trust anchor. Examples of local trust anchors include
policy-provided or user-installed root certificates. In all other cases, the
check is performed independent of this policy's setting.

If this policy is not configured,
Microsoft Edge will behave as if the
policy is enabled.

This policy is available for administrators to preview the behavior of a
future release, which will enable this check by default. At that point, this
policy will remain temporarily available for administrators that need more
time to update their certificates to meet the new RSA key usage requirements.

Connections that fail this check will fail with the error
ERR_SSL_KEY_USAGE_INCOMPATIBLE. Sites that fail with this error likely have a
misconfigured certificate. Modern ECDHE_RSA cipher suites use the
&quot;digitalSignature&quot; key usage option, while legacy RSA decryption cipher suites
use the &quot;keyEncipherment&quot; key usage option. If uncertain, administrators should
include both in RSA certificates meant for HTTPS.

The policy has been obsoleted starting from Microsoft Edge version 136,
but the key check has been always enabled since Microsoft Edge version 124.</string><string id="SUPPORTED_WIN7_V97">Microsoft Edge version 97, Windows 7 or later</string><string id="SUPPORTED_WIN7_V116">Microsoft Edge version 116, Windows 7 or later</string><string id="SUPPORTED_WIN7_V118">Microsoft Edge version 118, Windows 7 or later</string><string id="SUPPORTED_WIN7_V87">Microsoft Edge version 87, Windows 7 or later</string><string id="SUPPORTED_WIN7_V121">Microsoft Edge version 121, Windows 7 or later</string><string id="SUPPORTED_WIN7_V123">Microsoft Edge version 123, Windows 7 or later</string><string id="SUPPORTED_WIN7_V125">Microsoft Edge version 125, Windows 7 or later</string><string id="OBSOLETE_WIN7_V123_V135">Microsoft Edge version 123-135, Windows 7 or later</string><string id="OBSOLETE_WIN7_V125_V137">Microsoft Edge version 125-137, Windows 7 or later</string><string id="OBSOLETE_WIN7_V123_V131">Microsoft Edge version 123-131, Windows 7 or later</string><string id="microsoft_edge_webview2">Microsoft Edge WebView2</string><string id="microsoft_edge_webview2_recommended">Microsoft Edge WebView2 - Default Settings (users can override)</string></stringTable><presentationTable><presentation id="BrowserExecutableFolder"><listBox refId="BrowserExecutableFolderDesc">Set value name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications.</listBox></presentation><presentation id="ChannelSearchKind"><listBox refId="ChannelSearchKindDesc">Set value name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications.</listBox></presentation><presentation id="ReleaseChannelPreference"><listBox refId="ReleaseChannelPreferenceDesc">Set value name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications.</listBox></presentation><presentation id="ReleaseChannels"><listBox refId="ReleaseChannelsDesc">Set value name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications.</listBox></presentation><presentation id="AccessControlAllowMethodsInCORSPreflightSpecConformant"/><presentation id="BlockTruncatedCookies"/><presentation id="ZstdContentEncodingEnabled"/><presentation id="ExperimentationAndConfigurationServiceControl"><dropdownList refId="ExperimentationAndConfigurationServiceControl">Control communication with the Experimentation and Configuration Service</dropdownList></presentation><presentation id="ForcePermissionPolicyUnloadDefaultEnabled"/><presentation id="HttpAllowlist"><listBox refId="HttpAllowlistDesc">HTTP Allowlist</listBox></presentation><presentation id="NewBaseUrlInheritanceBehaviorAllowed"/><presentation id="NewPDFReaderWebView2List"><listBox refId="NewPDFReaderWebView2ListDesc">Set value name to the Application User Model ID or the executable file name. You can use the &quot;*&quot; wildcard as value name to apply to all applications.</listBox></presentation><presentation id="RSAKeyUsageForLocalAnchorsEnabled"/></presentationTable></resources></policyDefinitionResources>